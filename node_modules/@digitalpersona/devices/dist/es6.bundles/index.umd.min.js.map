{"version":3,"file":"index.umd.min.js","sources":["../es6/common/events.js","../es6/devices/events.js","../es6/devices/cards/cards.js","../es6/devices/websdk/messages.js","../es6/devices/cards/messages.js","../es6/devices/fingerprints/device.js","../es6/devices/fingerprints/sample.js","../es6/devices/fingerprints/messages.js","../es6/devices/iwa/messages.js","../es6/devices/cards/events.js","../es6/private/eventSource.js","../es6/devices/websdk/channel.js","../es6/devices/websdk/command.js","../es6/devices/fingerprints/events.js","../es6/devices/cards/reader.js","../es6/devices/fingerprints/reader.js","../es6/devices/iwa/device.js"],"sourcesContent":["/**\r\n * A base class for DigitalPersona events.\r\n */\r\nexport class Event {\r\n    constructor(type) {\r\n        this.type = type;\r\n    }\r\n}\r\n/**\r\n * An event signaling a problem with a device channel communication.\r\n */\r\nexport class CommunicationFailed extends Event {\r\n    constructor() {\r\n        super(\"CommunicationFailed\");\r\n    }\r\n}\r\n//# sourceMappingURL=events.js.map","import { Event } from '../common';\r\n/** A base class for device events.  */\r\nexport class DeviceEvent extends Event {\r\n    /** Constructs a new event.\r\n     * @param type - an event type\r\n     * @param deviceId - a device ID.\r\n     */\r\n    constructor(type, deviceId) {\r\n        super(type);\r\n        this.deviceId = deviceId;\r\n    }\r\n}\r\n/** An event signaling that a device was connected. */\r\nexport class DeviceConnected extends DeviceEvent {\r\n    /** Constructs a new event.\r\n     * @param deviceId - a device ID.\r\n     */\r\n    constructor(deviceId) {\r\n        super(\"DeviceConnected\", deviceId);\r\n    }\r\n}\r\n/** An event signaling that a device was disconnected. */\r\nexport class DeviceDisconnected extends DeviceEvent {\r\n    /** Constructs a new event.\r\n     * @param deviceId - a device ID.\r\n     */\r\n    constructor(deviceId) {\r\n        super(\"DeviceDisconnected\", deviceId);\r\n    }\r\n}\r\n//# sourceMappingURL=events.js.map","/** Enumerates supported card types. */\r\nexport var CardType;\r\n(function (CardType) {\r\n    /** A smartcard. */\r\n    CardType[CardType[\"Contact\"] = 1] = \"Contact\";\r\n    /** A contactless card. */\r\n    CardType[CardType[\"Contactless\"] = 2] = \"Contactless\";\r\n    /** A proximity card. */\r\n    CardType[CardType[\"Proximity\"] = 4] = \"Proximity\";\r\n})(CardType || (CardType = {}));\r\n/** Bitwise flags for attributes supported by a card. */\r\nexport var CardAttributes;\r\n(function (CardAttributes) {\r\n    /** The card supports PIN code. */\r\n    CardAttributes[CardAttributes[\"SupportsPIN\"] = 1] = \"SupportsPIN\";\r\n    /** The card supports UID. */\r\n    CardAttributes[CardAttributes[\"SupportsUID\"] = 2] = \"SupportsUID\";\r\n    /** The card supports PKI. */\r\n    CardAttributes[CardAttributes[\"IsPKI\"] = 65536] = \"IsPKI\";\r\n    /** The card supports PIV. */\r\n    CardAttributes[CardAttributes[\"IsPIV\"] = 131072] = \"IsPIV\";\r\n    /** The card is read-only. */\r\n    CardAttributes[CardAttributes[\"IsReadOnly\"] = 2147483648] = \"IsReadOnly\";\r\n})(CardAttributes || (CardAttributes = {}));\r\n//# sourceMappingURL=cards.js.map","/**@internal\r\n *\r\n */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    MessageType[MessageType[\"Response\"] = 0] = \"Response\";\r\n    MessageType[MessageType[\"Notification\"] = 1] = \"Notification\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=messages.js.map","/**@internal\r\n *\r\n */\r\nexport var Method;\r\n(function (Method) {\r\n    Method[Method[\"EnumerateReaders\"] = 1] = \"EnumerateReaders\";\r\n    Method[Method[\"EnumerateCards\"] = 2] = \"EnumerateCards\";\r\n    Method[Method[\"GetCardInfo\"] = 3] = \"GetCardInfo\";\r\n    Method[Method[\"GetCardUID\"] = 4] = \"GetCardUID\";\r\n    Method[Method[\"GetDPCardAuthData\"] = 5] = \"GetDPCardAuthData\";\r\n    Method[Method[\"GetDPCardEnrollData\"] = 6] = \"GetDPCardEnrollData\";\r\n    Method[Method[\"Subscribe\"] = 100] = \"Subscribe\";\r\n    Method[Method[\"Unsubscribe\"] = 101] = \"Unsubscribe\";\r\n})(Method || (Method = {}));\r\n/**@internal\r\n *\r\n */\r\nexport var NotificationType;\r\n(function (NotificationType) {\r\n    NotificationType[NotificationType[\"ReaderConnected\"] = 1] = \"ReaderConnected\";\r\n    NotificationType[NotificationType[\"ReaderDisconnected\"] = 2] = \"ReaderDisconnected\";\r\n    NotificationType[NotificationType[\"CardInserted\"] = 3] = \"CardInserted\";\r\n    NotificationType[NotificationType[\"CardRemoved\"] = 4] = \"CardRemoved\";\r\n})(NotificationType || (NotificationType = {}));\r\n//# sourceMappingURL=messages.js.map","/**\r\n * Fingerprint device types.\r\n */\r\nexport var DeviceUidType;\r\n(function (DeviceUidType) {\r\n    /** The fingerprint device is embedded and cannot be removed. */\r\n    DeviceUidType[DeviceUidType[\"Persistent\"] = 0] = \"Persistent\";\r\n    /** The fingerprint device can be removed. */\r\n    DeviceUidType[DeviceUidType[\"Volatile\"] = 1] = \"Volatile\";\r\n})(DeviceUidType || (DeviceUidType = {}));\r\n/**\r\n * Fingerprint device modalities (how users should use they fingers to make a scan).\r\n */\r\nexport var DeviceModality;\r\n(function (DeviceModality) {\r\n    /** The fingerprint modality is not known. */\r\n    DeviceModality[DeviceModality[\"Unknown\"] = 0] = \"Unknown\";\r\n    /** Users must swipe a single finger.  */\r\n    DeviceModality[DeviceModality[\"Swipe\"] = 1] = \"Swipe\";\r\n    /** Users must place a single finger over a scaning area. */\r\n    DeviceModality[DeviceModality[\"Area\"] = 2] = \"Area\";\r\n    /** Users must place multiple fingers over a scaning area. */\r\n    DeviceModality[DeviceModality[\"AreaMultifinger\"] = 3] = \"AreaMultifinger\";\r\n})(DeviceModality || (DeviceModality = {}));\r\n/** A fingerprint reader technology (a method of scanning)  */\r\nexport var DeviceTechnology;\r\n(function (DeviceTechnology) {\r\n    /** The method of scanning is unknown. */\r\n    DeviceTechnology[DeviceTechnology[\"Unknown\"] = 0] = \"Unknown\";\r\n    /** The reader uses an optical image of a finger skin. */\r\n    DeviceTechnology[DeviceTechnology[\"Optical\"] = 1] = \"Optical\";\r\n    /** The reader uses changes of electrical capacitance of a finger skin. */\r\n    DeviceTechnology[DeviceTechnology[\"Capacitive\"] = 2] = \"Capacitive\";\r\n    /** The reader uses a thermal image of a finger.  */\r\n    DeviceTechnology[DeviceTechnology[\"Thermal\"] = 3] = \"Thermal\";\r\n    /** The reader uses changes of a pressure under the finger. */\r\n    DeviceTechnology[DeviceTechnology[\"Pressure\"] = 4] = \"Pressure\";\r\n})(DeviceTechnology || (DeviceTechnology = {}));\r\n//# sourceMappingURL=device.js.map","/**\r\n * A fingerprint sample format.\r\n */\r\nexport var SampleFormat;\r\n(function (SampleFormat) {\r\n    /** A raw fingerprint image (bitmap). */\r\n    SampleFormat[SampleFormat[\"Raw\"] = 1] = \"Raw\";\r\n    /** A fingerprint image encoded into an intermediate format. */\r\n    SampleFormat[SampleFormat[\"Intermediate\"] = 2] = \"Intermediate\";\r\n    /** A compressed fingerprint image (e.q. JPEG2000, WSQ). */\r\n    SampleFormat[SampleFormat[\"Compressed\"] = 3] = \"Compressed\";\r\n    /** A Portable Network Graphics (PNG) format. */\r\n    SampleFormat[SampleFormat[\"PngImage\"] = 5] = \"PngImage\";\r\n})(SampleFormat || (SampleFormat = {}));\r\n/**\r\n * A figerprint image quality.\r\n */\r\nexport var QualityCode;\r\n(function (QualityCode) {\r\n    QualityCode[QualityCode[\"Good\"] = 0] = \"Good\";\r\n    QualityCode[QualityCode[\"NoImage\"] = 1] = \"NoImage\";\r\n    QualityCode[QualityCode[\"TooLight\"] = 2] = \"TooLight\";\r\n    QualityCode[QualityCode[\"TooDark\"] = 3] = \"TooDark\";\r\n    QualityCode[QualityCode[\"TooNoisy\"] = 4] = \"TooNoisy\";\r\n    QualityCode[QualityCode[\"LowContrast\"] = 5] = \"LowContrast\";\r\n    QualityCode[QualityCode[\"NotEnoughFeatures\"] = 6] = \"NotEnoughFeatures\";\r\n    QualityCode[QualityCode[\"NotCentered\"] = 7] = \"NotCentered\";\r\n    QualityCode[QualityCode[\"NotAFinger\"] = 8] = \"NotAFinger\";\r\n    QualityCode[QualityCode[\"TooHigh\"] = 9] = \"TooHigh\";\r\n    QualityCode[QualityCode[\"TooLow\"] = 10] = \"TooLow\";\r\n    QualityCode[QualityCode[\"TooLeft\"] = 11] = \"TooLeft\";\r\n    QualityCode[QualityCode[\"TooRight\"] = 12] = \"TooRight\";\r\n    QualityCode[QualityCode[\"TooStrange\"] = 13] = \"TooStrange\";\r\n    QualityCode[QualityCode[\"TooFast\"] = 14] = \"TooFast\";\r\n    QualityCode[QualityCode[\"TooSkewed\"] = 15] = \"TooSkewed\";\r\n    QualityCode[QualityCode[\"TooShort\"] = 16] = \"TooShort\";\r\n    QualityCode[QualityCode[\"TooSlow\"] = 17] = \"TooSlow\";\r\n    QualityCode[QualityCode[\"ReverseMotion\"] = 18] = \"ReverseMotion\";\r\n    QualityCode[QualityCode[\"PressureTooHard\"] = 19] = \"PressureTooHard\";\r\n    QualityCode[QualityCode[\"PressureTooLight\"] = 20] = \"PressureTooLight\";\r\n    QualityCode[QualityCode[\"WetFinger\"] = 21] = \"WetFinger\";\r\n    QualityCode[QualityCode[\"FakeFinger\"] = 22] = \"FakeFinger\";\r\n    QualityCode[QualityCode[\"TooSmall\"] = 23] = \"TooSmall\";\r\n    QualityCode[QualityCode[\"RotatedTooMuch\"] = 24] = \"RotatedTooMuch\";\r\n})(QualityCode || (QualityCode = {}));\r\n//# sourceMappingURL=sample.js.map","/**@internal\r\n *\r\n */\r\nexport var Method;\r\n(function (Method) {\r\n    Method[Method[\"EnumerateDevices\"] = 1] = \"EnumerateDevices\";\r\n    Method[Method[\"GetDeviceInfo\"] = 2] = \"GetDeviceInfo\";\r\n    Method[Method[\"StartAcquisition\"] = 3] = \"StartAcquisition\";\r\n    Method[Method[\"StopAcquisition\"] = 4] = \"StopAcquisition\";\r\n})(Method || (Method = {}));\r\n/**@internal\r\n *\r\n */\r\nexport var NotificationType;\r\n(function (NotificationType) {\r\n    NotificationType[NotificationType[\"Completed\"] = 0] = \"Completed\";\r\n    NotificationType[NotificationType[\"Error\"] = 1] = \"Error\";\r\n    NotificationType[NotificationType[\"Disconnected\"] = 2] = \"Disconnected\";\r\n    NotificationType[NotificationType[\"Connected\"] = 3] = \"Connected\";\r\n    NotificationType[NotificationType[\"Quality\"] = 4] = \"Quality\";\r\n    NotificationType[NotificationType[\"Stopped\"] = 10] = \"Stopped\";\r\n    NotificationType[NotificationType[\"Started\"] = 11] = \"Started\";\r\n})(NotificationType || (NotificationType = {}));\r\n//# sourceMappingURL=messages.js.map","/**@internal\r\n *\r\n */\r\nexport var Method;\r\n(function (Method) {\r\n    Method[Method[\"Init\"] = 1] = \"Init\";\r\n    Method[Method[\"Continue\"] = 2] = \"Continue\";\r\n    Method[Method[\"Term\"] = 3] = \"Term\";\r\n    Method[Method[\"Authenticate\"] = 4] = \"Authenticate\";\r\n})(Method || (Method = {}));\r\n/**@internal\r\n *\r\n */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    MessageType[MessageType[\"Response\"] = 0] = \"Response\";\r\n    MessageType[MessageType[\"Notification\"] = 1] = \"Notification\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=messages.js.map","import { DeviceEvent } from '../events';\r\n/**\r\n * An event signaling that a card was presented (inserted or touched) to a card reader.\r\n */\r\nexport class CardInserted extends DeviceEvent {\r\n    /** Contructs a new event object.\r\n     * @param reader - a name of a card reader where the card was presented.\r\n     * @param card - a name of a card presented.\r\n     */\r\n    constructor(reader, card) {\r\n        super(\"CardInserted\", reader);\r\n        this.cardId = card;\r\n    }\r\n}\r\n/** An event signaling that a card was removed from a card reader. */\r\nexport class CardRemoved extends DeviceEvent {\r\n    /** Contructs a new event object.\r\n     * @param reader - a name of a card reader where the card was presented.\r\n     * @param card - a name of a card presented.\r\n     */\r\n    constructor(reader, card) {\r\n        super(\"CardRemoved\", reader);\r\n        this.cardId = card;\r\n    }\r\n}\r\n//# sourceMappingURL=events.js.map","/**@internal\r\n *\r\n */\r\nexport class MultiCastEventSource {\r\n    constructor() {\r\n        this.handlers = {};\r\n    }\r\n    _on(event, handler) {\r\n        this.handlers[event] = this.handlers[event] || [];\r\n        this.handlers[event].push(handler);\r\n        return handler;\r\n    }\r\n    _off(event, handler) {\r\n        if (event) {\r\n            const hh = this.handlers[event];\r\n            if (hh) {\r\n                if (handler)\r\n                    this.handlers[event] = hh.filter(h => h !== handler);\r\n                else\r\n                    delete this.handlers[event];\r\n            }\r\n        }\r\n        else\r\n            this.handlers = {};\r\n        return this;\r\n    }\r\n    emit(event) {\r\n        if (!event)\r\n            return;\r\n        const eventName = event.type;\r\n        const unicast = this[\"on\" + eventName];\r\n        if (unicast)\r\n            this.invoke(unicast, event);\r\n        const multicast = this.handlers[eventName];\r\n        if (multicast)\r\n            multicast.forEach(h => this.invoke(h, event));\r\n    }\r\n    invoke(handler, event) {\r\n        try {\r\n            handler(event);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=eventSource.js.map","import { Base64Url, Utf8 } from '@digitalpersona/core';\r\nimport { MessageType } from './messages';\r\nimport 'WebSdk';\r\n/**@internal\r\n *\r\n */\r\nexport class Channel {\r\n    constructor(channelName, options) {\r\n        this.pending = [];\r\n        this.webChannel = new WebSdk.WebChannelClient(channelName, options);\r\n        this.webChannel.onConnectionSucceed = this.onConnectionSucceed.bind(this);\r\n        this.webChannel.onConnectionFailed = this.onConnectionFailed.bind(this);\r\n        this.webChannel.onDataReceivedTxt = this.onDataReceivedTxt.bind(this);\r\n    }\r\n    send(request, timeout) {\r\n        const deferred = new Promise((resolve, reject) => {\r\n            request.resolve = resolve;\r\n            request.reject = reject;\r\n            if (timeout) {\r\n                request.timer = window.setTimeout(() => {\r\n                    if (request.timer)\r\n                        try {\r\n                            request.reject(new Error(\"Timeout\"));\r\n                        }\r\n                        catch (e) { }\r\n                }, timeout);\r\n            }\r\n        });\r\n        this.pending.push(request);\r\n        if (this.webChannel.isConnected())\r\n            this.processRequestQueue();\r\n        else\r\n            this.webChannel.connect();\r\n        return deferred;\r\n    }\r\n    onConnectionSucceed() {\r\n        this.processRequestQueue();\r\n    }\r\n    onConnectionFailed() {\r\n        this.pending.forEach(r => r.reject(new Error(\"Communication failure.\")));\r\n        this.pending = [];\r\n        if (this.onCommunicationError)\r\n            try {\r\n                this.onCommunicationError();\r\n            }\r\n            catch (e) { }\r\n    }\r\n    onDataReceivedTxt(data) {\r\n        const message = JSON.parse(Utf8.fromBase64Url(data));\r\n        if (message.Type === MessageType.Response) {\r\n            const response = JSON.parse(Utf8.fromBase64Url(message.Data || \"\"));\r\n            const request = this.findRequest(response);\r\n            if (request !== null) {\r\n                if (request.timer) {\r\n                    window.clearTimeout(request.timer);\r\n                    delete request.timer;\r\n                }\r\n                const hr = (response.Result >>> 0);\r\n                if (hr > 0x7FFFFFFF)\r\n                    request.reject(new Error(`0x${hr.toString(16)}`));\r\n                else\r\n                    request.resolve(response);\r\n            }\r\n            else\r\n                console.log(`Orphaned response: ${message.Type}`);\r\n        }\r\n        else if (message.Type === MessageType.Notification) {\r\n            const notification = JSON.parse(Utf8.fromBase64Url(message.Data || \"\"));\r\n            if (this.onNotification)\r\n                try {\r\n                    this.onNotification(notification);\r\n                }\r\n                catch (e) { }\r\n        }\r\n        else\r\n            console.log(`Unknown message type: ${message.Type}`);\r\n    }\r\n    processRequestQueue() {\r\n        this.pending.forEach((req, i, items) => {\r\n            if (!req.sent) {\r\n                this.webChannel.sendDataTxt(Base64Url.fromJSON(req.command));\r\n                items[i].sent = true;\r\n            }\r\n        });\r\n    }\r\n    findRequest(response) {\r\n        for (let i = 0; i < this.pending.length; i++) {\r\n            const request = this.pending[i];\r\n            if (request.sent && (request.command.Method === response.Method)) {\r\n                this.pending.splice(i, 1);\r\n                return request;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n//# sourceMappingURL=channel.js.map","/**@internal\r\n *\r\n */\r\nexport class Command {\r\n    constructor(method, parameters) {\r\n        this.Method = method;\r\n        this.Parameters = parameters;\r\n    }\r\n}\r\n/**@internal\r\n *\r\n */\r\nexport class Request {\r\n    constructor(command) {\r\n        this.command = command;\r\n        this.sent = false;\r\n    }\r\n}\r\n//# sourceMappingURL=command.js.map","import { DeviceEvent } from '../events';\r\n/** An event signaling that a new fingerprint sample (or samples) was acquired during a scan. */\r\nexport class SamplesAcquired extends DeviceEvent {\r\n    /** Constructs a new event object.\r\n     * @param deviceUid - a fingerprint reader ID.\r\n     * @param sampleFormat - a fingerprint sample format.\r\n     * @param sampleData - raw sample data received with WebSdk notifiation.\r\n     */\r\n    constructor(deviceUid, sampleFormat, sampleData) {\r\n        super(\"SamplesAcquired\", deviceUid);\r\n        this.sampleFormat = sampleFormat;\r\n        this.samples = JSON.parse(sampleData);\r\n    }\r\n}\r\n/** An event reporting a quality of a fingerprint scan. */\r\nexport class QualityReported extends DeviceEvent {\r\n    /** Constructs a new event object.\r\n     * @param deviceUid - a fingerprint reader ID.\r\n     * @param quality - a fingerprint scan quality.\r\n     */\r\n    constructor(deviceUid, quality) {\r\n        super(\"QualityReported\", deviceUid);\r\n        this.quality = quality;\r\n    }\r\n}\r\n/** An event reporting a fingerprint reader error.  */\r\nexport class ErrorOccurred extends DeviceEvent {\r\n    /** Constructs a new event object.\r\n     * @param deviceUid - a fingeprint reader ID.\r\n     * @param error - an error code.\r\n     */\r\n    constructor(deviceUid, error) {\r\n        super(\"ErrorOccurred\", deviceUid);\r\n        this.error = error;\r\n    }\r\n}\r\n/** An event signaling that a fingerprint reader is ready and waiting to scan a finger. */\r\nexport class AcquisitionStarted extends DeviceEvent {\r\n    /** Constructs a new event object.\r\n     * @param deviceUid - a fingeprint reader ID.\r\n     */\r\n    constructor(deviceUid) {\r\n        super(\"AcquisitionStarted\", deviceUid);\r\n    }\r\n}\r\n/** An event signaling that a fingerprint reader has stopped waiting for a finger scan. */\r\nexport class AcquisitionStopped extends DeviceEvent {\r\n    /** Constructs a new event object.\r\n     * @param deviceUid - a fingeprint reader ID.\r\n     */\r\n    constructor(deviceUid) {\r\n        super(\"AcquisitionStopped\", deviceUid);\r\n    }\r\n}\r\n//# sourceMappingURL=events.js.map","import { MultiCastEventSource } from '../../private';\r\nimport { Command, Request, Channel } from '../websdk';\r\nimport { CommunicationFailed } from '../../common';\r\nimport { DeviceConnected, DeviceDisconnected } from '../events';\r\nimport { CardInserted, CardRemoved } from './events';\r\nimport { Method, NotificationType } from \"./messages\";\r\nimport { Utf8, Base64Url, Base64, Utf16 } from '@digitalpersona/core';\r\n/**\r\n * A card reader API class.\r\n * An instance of this class allows to subscribe to card reader events and read card data.\r\n * The card reader API uses DigitalPersona WebSDK to communicate with card reader drivers and hardware.\r\n */\r\nexport class CardsReader extends MultiCastEventSource {\r\n    /**\r\n     * Constructs a new card reader API object.\r\n     * @param options - options for the `WebSdk` channel.\r\n     */\r\n    constructor(options) {\r\n        super();\r\n        this.channel = new Channel(\"smartcards\", options);\r\n        this.channel.onCommunicationError = this.onConnectionFailed.bind(this);\r\n        this.channel.onNotification = this.processNotification.bind(this);\r\n    }\r\n    /**\r\n     * Adds an event handler for the event.\r\n     * This is a multicast subscription, i.e. many handlers can be registered at once.\r\n     *\r\n     * @param event - a name of the event to subscribe, e.g. \"CardInserted\"\r\n     * @param handler - an event handler.\r\n     * @returns an event handler reference.\r\n     * Store the reference and pass it to the {@link CardsReader.off} to unsubscribe from the event.\r\n     *\r\n     * @example\r\n     * ```\r\n     * class CardComponent\r\n     * {\r\n     *     private reader: CardsReader;\r\n     *\r\n     *     private onCardInserted = (event: CardInserted) => { ... }\r\n     *     private onCardRemoved = (event: CardRemoved) => { ... }\r\n     *     ...\r\n     *\r\n     *     public async $onInit() {\r\n     *         this.reader = new CardsReader();\r\n     *         this.reader.on(\"CardInserted\", this.onCardInserted);\r\n     *         this.reader.on(\"CardRemoved\", this.onCardRemoved);\r\n     *         ...\r\n     *         await this.cardReader.subscribe()\r\n     *     }\r\n     *     public async $onDestroy() {\r\n     *         await this.cardReader.unsubscribe();\r\n     *         this.reader.off(\"CardInserted\", this.onCardInserted);\r\n     *         this.reader.off(\"CardRemoved\", this.onCardRemoved);\r\n     *         ...\r\n     *         // alternatively, call this.reader.off() to unsubscribe from all events at once.\r\n     *         delete this.reader;\r\n     *     }\r\n     * }\r\n     * ```\r\n     */\r\n    on(event, handler) { return this._on(event, handler); }\r\n    /** Deletes an event handler for the event.\r\n     * @param event - a name of the event to subscribe.\r\n     * @param handler - an event handler added with the {@link CardsReader.on} method.\r\n     * @example See example in {@link CardsReader.on}\r\n     */\r\n    off(event, handler) { return this._off(event, handler); }\r\n    /** Lists all connected card readers.\r\n     * @returns a promise to return a list of card reader names.\r\n     */\r\n    enumerateReaders() {\r\n        return this.channel.send(new Request(new Command(Method.EnumerateReaders)))\r\n            .then(response => {\r\n            const list = JSON.parse(Utf8.fromBase64Url(response.Data || \"{}\"));\r\n            return JSON.parse(list.Readers || \"[]\");\r\n        });\r\n    }\r\n    /** Lists all inserted cards.\r\n     * @returns a promise to return a list of card information for connected cards.\r\n     */\r\n    enumerateCards() {\r\n        return this.channel.send(new Request(new Command(Method.EnumerateCards)))\r\n            .then(response => {\r\n            const list = JSON.parse(Utf8.fromBase64Url(response.Data || \"{}\"));\r\n            const cards = JSON.parse(list.Cards || \"[]\");\r\n            return cards.map(s => JSON.parse(Utf16.fromBase64Url(s)));\r\n        });\r\n    }\r\n    /** Reads card data from a specific card.\r\n     * @param reader - a name of a card reader where the card was presented.\r\n     * @returns a promise to return a card information.\r\n     * The promise can be fulfilled but return `null` if the card has no information.\r\n     * The promise will be rejected if a card is not found or in case of a reading error.\r\n     */\r\n    getCardInfo(reader) {\r\n        return this.channel.send(new Request(new Command(Method.GetCardInfo, Base64Url.fromJSON({ Reader: reader }))))\r\n            .then(response => {\r\n            const cardInfo = JSON.parse(Utf8.fromBase64Url(response.Data || \"null\"));\r\n            return cardInfo;\r\n        });\r\n    }\r\n    /** Reads a card unique identifier.\r\n     * @param reader - a name of a card reader where the card was presented.\r\n     * @returns a promise to return a card identifier.\r\n     */\r\n    getCardUid(reader) {\r\n        return this.channel.send(new Request(new Command(Method.GetCardUID, Base64Url.fromJSON({ Reader: reader }))))\r\n            .then(response => {\r\n            const data = Base64.fromBase64Url(response.Data || \"\");\r\n            return data;\r\n        });\r\n    }\r\n    /** Reads card authentication data.\r\n     * @param reader - a name of a card reader where the card was presented.\r\n     * @param pin - an PIN code (for cards requiring a PIN).\r\n     * @returns a promise to return card authentication data.\r\n     * The card data is an opaque encoded string which should be sent to the server as is.\r\n     */\r\n    getCardAuthData(reader, pin) {\r\n        return this.channel.send(new Request(new Command(Method.GetDPCardAuthData, Base64Url.fromJSON({ Reader: reader, PIN: pin || \"\" }))))\r\n            .then(response => {\r\n            const data = JSON.parse(Utf8.fromBase64Url(response.Data || \"\"));\r\n            return data;\r\n        });\r\n    }\r\n    /** Reads card enrollment data.\r\n     * @param reader - a name of a card reader where the card was presented.\r\n     * @param pin - an PIN code (for cards requiring a PIN).\r\n     * @returns a promise to return a card enrollment data.\r\n     * The card data is an opaque encoded string which should be sent to the server as is.\r\n     */\r\n    getCardEnrollData(reader, pin) {\r\n        return this.channel.send(new Request(new Command(Method.GetDPCardEnrollData, Base64Url.fromJSON({ Reader: reader, PIN: pin || \"\" }))))\r\n            .then(response => {\r\n            const data = JSON.parse(Utf8.fromBase64Url(response.Data || \"\"));\r\n            return data;\r\n        });\r\n    }\r\n    /** Starts listening for card reader events.\r\n     * @param reader - an optional name of a card reader to listen.\r\n     * If no name is provided, the API will start listening all card readers.\r\n     */\r\n    subscribe(reader) {\r\n        return this.channel.send(new Request(new Command(Method.Subscribe, reader ? Base64Url.fromJSON({ Reader: reader }) : \"\")))\r\n            .then();\r\n    }\r\n    /** Stop listening for card reader events.\r\n     * @param reader - an optional name of a card reader to stop listening.\r\n     * If no name is provided, the API will stop listening all card readers.\r\n     */\r\n    unsubscribe(reader) {\r\n        return this.channel.send(new Request(new Command(Method.Unsubscribe, reader ? Base64Url.fromJSON({ Reader: reader }) : \"\")))\r\n            .then();\r\n    }\r\n    /** Converts WebSdk connectivity error to a card API event. */\r\n    onConnectionFailed() {\r\n        this.emit(new CommunicationFailed());\r\n    }\r\n    /** Converts WebSdk notification to card API events. */\r\n    processNotification(notification) {\r\n        switch (notification.Event) {\r\n            case NotificationType.ReaderConnected:\r\n                return this.emit(new DeviceConnected(notification.Reader));\r\n            case NotificationType.ReaderDisconnected:\r\n                return this.emit(new DeviceDisconnected(notification.Reader));\r\n            case NotificationType.CardInserted:\r\n                return this.emit(new CardInserted(notification.Reader, notification.Card));\r\n            case NotificationType.CardRemoved:\r\n                return this.emit(new CardRemoved(notification.Reader, notification.Card));\r\n            default:\r\n                console.log(`Unknown notification: ${notification.Event}`);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=reader.js.map","import { Base64Url, Utf8 } from '@digitalpersona/core';\r\nimport { MultiCastEventSource } from '../../private';\r\nimport { Command, Request, Channel } from '../websdk';\r\nimport { CommunicationFailed } from '../../common';\r\nimport { DeviceConnected, DeviceDisconnected } from '../events';\r\nimport { ErrorOccurred, SamplesAcquired, QualityReported, AcquisitionStarted, AcquisitionStopped, } from './events';\r\nimport { Method, NotificationType } from './messages';\r\n/**\r\n * A fingerprint reader API.\r\n * An instance of this class allows to subscribe to finerprint reader events and read fingerprint data.\r\n * The fingerprint reader API uses DigitalPersona WebSDK to communicate with fingerprint reader drivers and hardware.\r\n */\r\nexport class FingerprintReader extends MultiCastEventSource {\r\n    /**\r\n     * Constructs a new fingerprint reader API object.\r\n     * @param options - options for the `WebSdk` channel.\r\n     */\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.channel = new Channel(\"fingerprints\", this.options);\r\n        this.channel.onCommunicationError = this.onConnectionFailed.bind(this);\r\n        this.channel.onNotification = this.processNotification.bind(this);\r\n    }\r\n    /**\r\n     * Adds an event handler for the event.\r\n     * This is a multicast subscription, i.e. many handlers can be registered at once.\r\n     *\r\n     * @param event - a name of the event to subscribe, e.g. \"SampleAcquired\"\r\n     * @param handler - an event handler.\r\n     * @returns an event handler reference.\r\n     * Store the reference and pass it to the {@link FingerprintReader.off} to unsubscribe from the event.\r\n     *\r\n     * @example\r\n     * ```\r\n     * class FingerprintComponent\r\n     * {\r\n     *     private reader: FingerprintReader;\r\n     *\r\n     *     private onDeviceConnected = (event: DeviceConnected) => { ... };\r\n     *     private onDeviceDisconnected = (event: DeviceDisconnected) => { ... };\r\n     *     private onSamplesAcquired = (event: SampleAquired) => { ... };\r\n     *     ...\r\n     *\r\n     *     public async $onInit() {\r\n     *         this.reader = new FingerprintReader();\r\n     *         this.reader.on(\"DeviceConnected\", onDeviceConnected);\r\n     *         this.reader.on(\"DeviceDisconnected\", onDeviceDisconnected);\r\n     *         this.reader.on(\"SamplesAcquired\", onSamplesAcquired);\r\n     *         ...\r\n     *         await this.fingerprintReader.startAcquisition(SampleFormat.Intermediate);\r\n     *     }\r\n     *     public async $onDestroy() {\r\n     *         await this.fingerprintReader.stopAcquisition();\r\n     *         this.reader.off(\"DeviceConnected\", onDeviceConnected);\r\n     *         this.reader.off(\"DeviceDisconnected\", onDeviceDisconnected);\r\n     *         this.reader.off(\"SamplesAcquired\", onSamplesAcquired);\r\n     *         ...\r\n     *         // alternatively, call this.reader.off() to unsubscribe from all events at once.\r\n     *         delete this.reader;\r\n     *     }\r\n     * }\r\n     * ```\r\n     */\r\n    on(event, handler) { return this._on(event, handler); }\r\n    /** Deletes an event handler for the event.\r\n     * @param event - a name of the event to subscribe.\r\n     * @param handler - an event handler added with the {@link FingerprintReader.on} method.\r\n     */\r\n    off(event, handler) { return this._off(event, handler); }\r\n    /** Lists all connected fingerprint readers.\r\n     * @returns a promise to return a list of fingerprint reader names.\r\n     */\r\n    enumerateDevices() {\r\n        return this.channel.send(new Request(new Command(Method.EnumerateDevices)))\r\n            .then(response => {\r\n            if (!response)\r\n                return [];\r\n            const deviceList = JSON.parse(Utf8.fromBase64Url(response.Data || \"{}\"));\r\n            return JSON.parse(deviceList.DeviceIDs || \"[]\");\r\n        });\r\n    }\r\n    /** Reads a fingerprint reader device information.\r\n     * @param deviceUid - a fingerprint reader ID.\r\n     * @returns a promise to return a device information.\r\n     * The promise can be fulfilled but return `null` if the reader provides no information.\r\n     * The promise will be rejected if a reader is not found or in case of a reading error.\r\n     */\r\n    getDeviceInfo(deviceUid) {\r\n        return this.channel.send(new Request(new Command(Method.GetDeviceInfo, Base64Url.fromJSON({ DeviceID: deviceUid }))))\r\n            .then(response => {\r\n            const deviceInfo = JSON.parse(Utf8.fromBase64Url(response.Data || \"null\"));\r\n            return deviceInfo;\r\n        });\r\n    }\r\n    /** Activate a fingerprint acquisition mode.\r\n     * This call will produce a {@link AcquisitionStarted} event if activation was successful.\r\n     * After that the reader will wait for a finger placed on the reader.\r\n     * When a finger is placed, a {@link QualityReported} event will report a scan quality,\r\n     * and a {@link SamplesAcquired} event will return a scanned sample in case of a successful scan.\r\n     */\r\n    startAcquisition(sampleFormat, deviceUid) {\r\n        return this.channel.send(new Request(new Command(Method.StartAcquisition, Base64Url.fromJSON({\r\n            DeviceID: deviceUid ? deviceUid : \"00000000-0000-0000-0000-000000000000\",\r\n            SampleType: sampleFormat,\r\n        }))))\r\n            .then();\r\n    }\r\n    /** Deactivates a fingerprint acquisition mode.\r\n     * This call will produce a {@link AcquisitionStopped} event if deactivation was successful.\r\n     * After that the reader will stop waiting for a finger.\r\n     */\r\n    stopAcquisition(deviceUid) {\r\n        return this.channel.send(new Request(new Command(Method.StopAcquisition, Base64Url.fromJSON({\r\n            DeviceID: deviceUid ? deviceUid : \"00000000-0000-0000-0000-000000000000\",\r\n        }))))\r\n            .then();\r\n    }\r\n    /** Converts WebSdk connectivity error to a fingerprint API event. */\r\n    onConnectionFailed() {\r\n        this.emit(new CommunicationFailed());\r\n    }\r\n    /** Converts WebSdk notification to fingerprint API events. */\r\n    processNotification(notification) {\r\n        switch (notification.Event) {\r\n            case NotificationType.Completed:\r\n                const completed = JSON.parse(Utf8.fromBase64Url(notification.Data || \"\"));\r\n                return this.emit(new SamplesAcquired(notification.Device, completed.SampleFormat, completed.Samples));\r\n            case NotificationType.Error:\r\n                const error = JSON.parse(Utf8.fromBase64Url(notification.Data || \"\"));\r\n                return this.emit(new ErrorOccurred(notification.Device, error.uError));\r\n            case NotificationType.Disconnected:\r\n                return this.emit(new DeviceDisconnected(notification.Device));\r\n            case NotificationType.Connected:\r\n                return this.emit(new DeviceConnected(notification.Device));\r\n            case NotificationType.Quality:\r\n                const quality = JSON.parse(Utf8.fromBase64Url(notification.Data || \"\"));\r\n                return this.emit(new QualityReported(notification.Device, quality.Quality));\r\n            case NotificationType.Stopped:\r\n                return this.emit(new AcquisitionStopped(notification.Device));\r\n            case NotificationType.Started:\r\n                return this.emit(new AcquisitionStarted(notification.Device));\r\n            default:\r\n                console.log(`Unknown notification: ${notification.Event}`);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=reader.js.map","import { MultiCastEventSource } from '../../private';\r\nimport { Command, Request, Channel } from '../websdk';\r\nimport { CommunicationFailed } from '../../common';\r\nimport { Method } from './messages';\r\n/**\r\n * Integrated Windows Authentication API.\r\n * An instance of this class allows internet browsers to authenticate in DigitalPersona servers\r\n * using Integrated Windows Authentication.\r\n * The IWA API uses DigitalPersona WebSDK to communicate with Windwows operating system and extract\r\n * Windows account data for authentication.\r\n */\r\nexport class WindowsAuthClient extends MultiCastEventSource {\r\n    /**\r\n     * Constructs a new IWA API object.\r\n     * @param options - options for the `WebSdk` channel.\r\n     */\r\n    constructor(options) {\r\n        super();\r\n        this.channel = new Channel(\"wia\", options);\r\n        this.channel.onCommunicationError = this.onConnectionFailed.bind(this);\r\n    }\r\n    /**\r\n     * Adds an event handler for the event.\r\n     * This is a multicast subscription, i.e. many handlers can be registered at once.\r\n     *\r\n     * @param event - a name of the event to subscribe, e.g. \"CommunicationFailed\"\r\n     * @param handler - an event handler.\r\n     * @returns an event handler reference.\r\n     * Store the reference and pass it to the {@link WindowsAuthClient.off} to unsubscribe from the event.\r\n     *\r\n     * @example\r\n     * ```\r\n     * class IntegratedWindowsAuthComponent\r\n     * {\r\n     *     private client: WindowsAuthClient;\r\n     *\r\n     *     private onCommunicationFailed = (event: CommunicationFailed) => { ... }\r\n     *\r\n     *     public $onInit() {\r\n     *         this.client = new WindowsAuthClient();\r\n     *         this.client.on(\"CommunicationFailed\", this.onCommunicationFailed);\r\n     *     }\r\n     *     public $onDestroy() {\r\n     *         this.client.off(\"CommunicationFailed\", this.onCommunicationFailed);\r\n     *         // alternatively, call this.reader.off() to unsubscribe from all events at once.\r\n     *         delete this.client;\r\n     *     }\r\n     * }\r\n     * ```\r\n     */\r\n    on(event, handler) { return this._on(event, handler); }\r\n    /** Deletes an event handler for the event.\r\n     * @param event - a name of the event to subscribe.\r\n     * @param handler - an event handler added with the {@link WindowsAuthClient.on} method.\r\n     */\r\n    off(event, handler) { return this._off(event, handler); }\r\n    /** Used internally. Do not call this method. */\r\n    init() {\r\n        return this.channel.send(new Request(new Command(Method.Init)), 3000)\r\n            .then(response => {\r\n            const data = JSON.parse(response.Data || \"{}\");\r\n            return { handle: data.Handle, data: data.Data };\r\n        });\r\n    }\r\n    /** Used internally. Do not call this method. */\r\n    continue(handle, data) {\r\n        return this.channel.send(new Request(new Command(Method.Continue, JSON.stringify({ Handle: handle, Data: data }))))\r\n            .then(response => {\r\n            const d = JSON.parse(response.Data || \"{}\");\r\n            return d.Data;\r\n        });\r\n    }\r\n    /** Used internally. Do not call this method. */\r\n    term(handle) {\r\n        return this.channel.send(new Request(new Command(Method.Term, JSON.stringify({ Handle: handle }))))\r\n            .then();\r\n    }\r\n    /** Converts WebSdk connectivity error to an IWA API event. */\r\n    onConnectionFailed() {\r\n        this.emit(new CommunicationFailed());\r\n    }\r\n}\r\n//# sourceMappingURL=device.js.map"],"names":["Event","[object Object]","type","this","CommunicationFailed","super","DeviceEvent","deviceId","DeviceConnected","DeviceDisconnected","CardType","CardAttributes","MessageType","Method","NotificationType","DeviceUidType","DeviceModality","DeviceTechnology","SampleFormat","QualityCode","CardInserted","reader","card","cardId","CardRemoved","MultiCastEventSource","handlers","event","handler","push","hh","filter","h","eventName","unicast","invoke","multicast","forEach","e","console","error","Channel","channelName","options","pending","webChannel","WebSdk","WebChannelClient","onConnectionSucceed","bind","onConnectionFailed","onDataReceivedTxt","request","timeout","deferred","Promise","resolve","reject","timer","window","setTimeout","Error","isConnected","processRequestQueue","connect","r","onCommunicationError","data","message","JSON","parse","Utf8","fromBase64Url","Type","Response","response","Data","findRequest","clearTimeout","hr","Result","toString","log","Notification","notification","onNotification","req","i","items","sent","sendDataTxt","Base64Url","fromJSON","command","length","splice","Command","method","parameters","Parameters","Request","SamplesAcquired","deviceUid","sampleFormat","sampleData","samples","QualityReported","quality","ErrorOccurred","AcquisitionStarted","AcquisitionStopped","channel","processNotification","_on","_off","send","EnumerateReaders","then","list","Readers","EnumerateCards","Cards","map","s","Utf16","GetCardInfo","Reader","GetCardUID","Base64","pin","GetDPCardAuthData","PIN","GetDPCardEnrollData","Subscribe","Unsubscribe","emit","ReaderConnected","ReaderDisconnected","Card","EnumerateDevices","deviceList","DeviceIDs","GetDeviceInfo","DeviceID","StartAcquisition","SampleType","StopAcquisition","Completed","completed","Device","Samples","uError","Disconnected","Connected","Quality","Stopped","Started","Init","handle","Handle","Continue","stringify","Term"],"mappings":"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"}