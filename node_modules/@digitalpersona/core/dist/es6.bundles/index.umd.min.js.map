{"version":3,"file":"index.umd.min.js","sources":["../es6/http/url.js","../es6/biometrics/factor.js","../es6/users/userNameType.js","../es6/jwt/claims.js","../es6/credentials/fingerprints.js","../es6/credentials/face.js","../es6/credentials/questions.js","../es6/encoders/encoders.js","../es6/users/user.js","../es6/jwt/jwt.js","../es6/jwt/ticket.js","../es6/credentials/credential.js"],"sourcesContent":["/**\r\n * Provides a way to construct sanitized URLs from a base URL, a path and a query object\r\n */\r\nexport class Url {\r\n    /** Constructs an URL object from a base URL, a path and a query object.\r\n     * @param base - base URL, e.g. `https://contoso.com`\r\n     * @param path - optional path, e.g. `api/v1/user`\r\n     * @param query - optional set of query parameters, e.g. `{ name: \"john\", type: \"5\" }`\r\n     * @remarks\r\n     * The URL is built by concatenation of a base URL with sanitized path and query object,\r\n     * adding all needed delimiters. Example:\r\n     * @example\r\n     * ```\r\n     * const url = new Url(\"https://contoso.com\", \"api/v1/user\", { name: \"john\", type: \"5\" });\r\n     * console.log(url.href);\r\n     * > https://contoso.com/api/v1/user?name=john&type=5\r\n     * ```\r\n     */\r\n    constructor(base, path, query) {\r\n        this.href = Url.create(base, path, query);\r\n    }\r\n    /** Builds a sanitized URL query from an JS object.\r\n     * @returns A hyperlink reference.\r\n     */\r\n    static getSanitizedQuery(query) {\r\n        return Object\r\n            .keys(query)\r\n            .map(key => [key, query[key]]\r\n            .map(encodeURIComponent)\r\n            .join(\"=\"))\r\n            .join(\"&\");\r\n    }\r\n    /** Constructs an URL string from a base URL, a path and a query object.\r\n     * @param base - base URL, e.g. `https://contoso.com`\r\n     * @param path - optional path, e.g. `api/v1/user`\r\n     * @param query - optional set of query parameters, e.g. `{ name: \"john\", type: \"5\" }`\r\n     * @remarks\r\n     * The URL is built by concatenation of a base URL with sanitized path and query object,\r\n     * adding all needed delimiters.\r\n     * @example\r\n     * ```typescript\r\n     * const href = Url.create(\"https://contoso.com\", \"api/v1/user\", { name: \"john\", type: \"5\" });\r\n     * console.log(href);\r\n     * ```\r\n     * `> https://contoso.com/api/v1/user?name=john&type=5`\r\n     */\r\n    static create(base, path, query) {\r\n        return base\r\n            + (path ? `/${encodeURI(path)}` : \"\")\r\n            + (query ? `?${Url.getSanitizedQuery(query)}` : \"\");\r\n    }\r\n}\r\n//# sourceMappingURL=url.js.map","/**\r\n * Biometric factors.\r\n */\r\nexport var BioFactor;\r\n(function (BioFactor) {\r\n    BioFactor[BioFactor[\"Multiple\"] = 1] = \"Multiple\";\r\n    BioFactor[BioFactor[\"FacialFeatures\"] = 2] = \"FacialFeatures\";\r\n    BioFactor[BioFactor[\"Voice\"] = 4] = \"Voice\";\r\n    BioFactor[BioFactor[\"Fingerprint\"] = 8] = \"Fingerprint\";\r\n    BioFactor[BioFactor[\"Iris\"] = 16] = \"Iris\";\r\n    BioFactor[BioFactor[\"Retina\"] = 32] = \"Retina\";\r\n    BioFactor[BioFactor[\"HandGeometry\"] = 64] = \"HandGeometry\";\r\n    BioFactor[BioFactor[\"SignatureDynamics\"] = 128] = \"SignatureDynamics\";\r\n    BioFactor[BioFactor[\"KeystrokeDynamics\"] = 256] = \"KeystrokeDynamics\";\r\n    BioFactor[BioFactor[\"LipMovement\"] = 512] = \"LipMovement\";\r\n    BioFactor[BioFactor[\"ThermalFaceImage\"] = 1024] = \"ThermalFaceImage\";\r\n    BioFactor[BioFactor[\"ThermalHandImage\"] = 2048] = \"ThermalHandImage\";\r\n    BioFactor[BioFactor[\"Gait\"] = 4096] = \"Gait\";\r\n})(BioFactor || (BioFactor = {}));\r\n/**\r\n * Biometric owner ID registered with {@link http://www.ibia.org/base/cbeff/_biometric_org.phpx | IBIA}.\r\n */\r\nexport var BioSampleFormatOwner;\r\n(function (BioSampleFormatOwner) {\r\n    BioSampleFormatOwner[BioSampleFormatOwner[\"None\"] = 0] = \"None\";\r\n    /** Neurotechnologija (fingerprints). */\r\n    BioSampleFormatOwner[BioSampleFormatOwner[\"Neurotechnologija\"] = 49] = \"Neurotechnologija\";\r\n    /** DigitalPersona (fingerprints) */\r\n    BioSampleFormatOwner[BioSampleFormatOwner[\"DigitalPersona\"] = 51] = \"DigitalPersona\";\r\n    /** Cognitec (face) */\r\n    BioSampleFormatOwner[BioSampleFormatOwner[\"Cognitec\"] = 99] = \"Cognitec\";\r\n    /** Innovatrics (face) */\r\n    BioSampleFormatOwner[BioSampleFormatOwner[\"Innovatrics\"] = 53] = \"Innovatrics\";\r\n})(BioSampleFormatOwner || (BioSampleFormatOwner = {}));\r\n/**\r\n * Biometric sample format info.\r\n */\r\nexport class BioSampleFormat {\r\n    constructor(FormatOwner, FormatID) {\r\n        this.FormatOwner = FormatOwner;\r\n        this.FormatID = FormatID;\r\n    }\r\n}\r\n/**\r\n * A representation type of a biometric sample.\r\n */\r\nexport var BioSampleType;\r\n(function (BioSampleType) {\r\n    BioSampleType[BioSampleType[\"Raw\"] = 1] = \"Raw\";\r\n    BioSampleType[BioSampleType[\"Intermediate\"] = 2] = \"Intermediate\";\r\n    BioSampleType[BioSampleType[\"Processed\"] = 4] = \"Processed\";\r\n    BioSampleType[BioSampleType[\"RawWSQCompressed\"] = 8] = \"RawWSQCompressed\";\r\n    BioSampleType[BioSampleType[\"Encrypted\"] = 16] = \"Encrypted\";\r\n    BioSampleType[BioSampleType[\"Signed\"] = 32] = \"Signed\";\r\n})(BioSampleType || (BioSampleType = {}));\r\n/**\r\n * A purpose the biometric sample was intended for.\r\n */\r\nexport var BioSamplePurpose;\r\n(function (BioSamplePurpose) {\r\n    BioSamplePurpose[BioSamplePurpose[\"Any\"] = 0] = \"Any\";\r\n    BioSamplePurpose[BioSamplePurpose[\"Verify\"] = 1] = \"Verify\";\r\n    BioSamplePurpose[BioSamplePurpose[\"Identify\"] = 2] = \"Identify\";\r\n    BioSamplePurpose[BioSamplePurpose[\"Enroll\"] = 3] = \"Enroll\";\r\n    BioSamplePurpose[BioSamplePurpose[\"EnrollForVerificationOnly\"] = 4] = \"EnrollForVerificationOnly\";\r\n    BioSamplePurpose[BioSamplePurpose[\"EnrollForIdentificationOnly\"] = 5] = \"EnrollForIdentificationOnly\";\r\n    BioSamplePurpose[BioSamplePurpose[\"Audit\"] = 6] = \"Audit\";\r\n})(BioSamplePurpose || (BioSamplePurpose = {}));\r\n/**\r\n * A biometric sample encryption type.\r\n */\r\nexport var BioSampleEncryption;\r\n(function (BioSampleEncryption) {\r\n    BioSampleEncryption[BioSampleEncryption[\"None\"] = 0] = \"None\";\r\n    BioSampleEncryption[BioSampleEncryption[\"XTEA\"] = 1] = \"XTEA\";\r\n})(BioSampleEncryption || (BioSampleEncryption = {}));\r\n/**\r\n * Contains meta-information about biometric sample data.\r\n */\r\nexport class BioSampleHeader {\r\n    constructor(\r\n    /** Biometric factor. Must be set to 8 for fingerprint. */\r\n    Factor, \r\n    /** Format owner (vendor) information. */\r\n    Format, \r\n    /** Biometric sample representation type. */\r\n    Type, \r\n    /** Purpose of the biometric sample. */\r\n    Purpose, \r\n    /** Quality of biometric sample. If we don't support quality it should be set to -1.  */\r\n    Quality, \r\n    /** Encryption of biometric sample. */\r\n    Encryption) {\r\n        this.Factor = Factor;\r\n        this.Format = Format;\r\n        this.Type = Type;\r\n        this.Purpose = Purpose;\r\n        this.Quality = Quality;\r\n        this.Encryption = Encryption;\r\n    }\r\n}\r\n/**\r\n * A biometric sample.\r\n */\r\nexport class BioSample {\r\n    constructor(\r\n    /** Biometric sample header. */\r\n    Header, \r\n    /** Base64url encoded biometric sample data */\r\n    Data) {\r\n        this.Header = Header;\r\n        this.Data = Data;\r\n        /** A version info. */\r\n        this.Version = 1;\r\n    }\r\n}\r\n//# sourceMappingURL=factor.js.map","/** Enumerates supported username formats. */\r\nexport var UserNameType;\r\n(function (UserNameType) {\r\n    /** A name not associated with any Windows account, to be used for local databases only.  */\r\n    UserNameType[UserNameType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /** NetBIOS domain name, for example, “THE_COMPANY”. */\r\n    UserNameType[UserNameType[\"NetBIOSDomain\"] = 1] = \"NetBIOSDomain\";\r\n    /** A DNS domain name, for example, “thecompany.com”. */\r\n    UserNameType[UserNameType[\"DNSDomain\"] = 2] = \"DNSDomain\";\r\n    /** A MS Windows account name, e.g “the_company\\jdoe” (domain\\user) or \"the_company\\\" (domain only). */\r\n    UserNameType[UserNameType[\"SAM\"] = 3] = \"SAM\";\r\n    /** The account name format used in Microsoft(r) Windows NT(r) 4.0, for example, “jdoe”.  */\r\n    UserNameType[UserNameType[\"Simple\"] = 4] = \"Simple\";\r\n    /** A GUID string, for example, “4fa050f0-f561-11cf-bdd9-00aa003a77b6”.  */\r\n    UserNameType[UserNameType[\"UID\"] = 5] = \"UID\";\r\n    /** A user principal name, for example, “jdoe@thecompany.com”.  */\r\n    UserNameType[UserNameType[\"UPN\"] = 6] = \"UPN\";\r\n    /** A friendly display name, for example, “John Doe”. */\r\n    UserNameType[UserNameType[\"Display\"] = 7] = \"Display\";\r\n    /** A user SID string, for example, “S-1-5-21-1004”. */\r\n    UserNameType[UserNameType[\"SID\"] = 8] = \"SID\";\r\n    /** A user name associated with DigitalPersona identity database (formerly known as \"Altus user\"). */\r\n    UserNameType[UserNameType[\"DP\"] = 9] = \"DP\";\r\n})(UserNameType || (UserNameType = {}));\r\n//# sourceMappingURL=userNameType.js.map","/** Enumerate publicly registered and private DigitalPersona claim names. */\r\nexport var ClaimName;\r\n(function (ClaimName) {\r\n    // registered names\r\n    ClaimName[\"TokensId\"] = \"jti\";\r\n    ClaimName[\"IssuerName\"] = \"iss\";\r\n    ClaimName[\"IssuedAt\"] = \"iat\";\r\n    ClaimName[\"Audience\"] = \"aud\";\r\n    ClaimName[\"NotBefore\"] = \"nbf\";\r\n    ClaimName[\"ExpiresAfter\"] = \"exp\";\r\n    ClaimName[\"SubjectName\"] = \"sub\";\r\n    // private DigitalPersona names\r\n    ClaimName[\"IssuerDomain\"] = \"dom\";\r\n    ClaimName[\"SubjectUid\"] = \"uid\";\r\n    ClaimName[\"ADGuid\"] = \"ad_guid\";\r\n    ClaimName[\"CredentialsUsed\"] = \"crd\";\r\n    ClaimName[\"Group\"] = \"group\";\r\n    ClaimName[\"Role\"] = \"role\";\r\n    ClaimName[\"WindowsAccountName\"] = \"wan\";\r\n    ClaimName[\"T24Principal\"] = \"t24\";\r\n})(ClaimName || (ClaimName = {}));\r\n//# sourceMappingURL=claims.js.map","/**\r\n * Positions of fingers.\r\n */\r\nexport var FingerPosition;\r\n(function (FingerPosition) {\r\n    FingerPosition[FingerPosition[\"Unknown\"] = 0] = \"Unknown\";\r\n    FingerPosition[FingerPosition[\"RightThumb\"] = 1] = \"RightThumb\";\r\n    FingerPosition[FingerPosition[\"RightIndex\"] = 2] = \"RightIndex\";\r\n    FingerPosition[FingerPosition[\"RightMiddle\"] = 3] = \"RightMiddle\";\r\n    FingerPosition[FingerPosition[\"RightRing\"] = 4] = \"RightRing\";\r\n    FingerPosition[FingerPosition[\"RightLittle\"] = 5] = \"RightLittle\";\r\n    FingerPosition[FingerPosition[\"LeftThumb\"] = 6] = \"LeftThumb\";\r\n    FingerPosition[FingerPosition[\"LeftIndex\"] = 7] = \"LeftIndex\";\r\n    FingerPosition[FingerPosition[\"LeftMiddle\"] = 8] = \"LeftMiddle\";\r\n    FingerPosition[FingerPosition[\"LeftRing\"] = 9] = \"LeftRing\";\r\n    FingerPosition[FingerPosition[\"LeftLittle\"] = 10] = \"LeftLittle\";\r\n})(FingerPosition || (FingerPosition = {}));\r\n/** Finger enrollment data. */\r\nexport class Finger {\r\n    constructor(\r\n    /** Finger position. */\r\n    position) {\r\n        this.position = position;\r\n    }\r\n    /** Creates the finger enrollment data from a plain JSON object. */\r\n    static fromJson(json) {\r\n        const obj = json;\r\n        return new Finger(obj.position);\r\n    }\r\n}\r\n//# sourceMappingURL=fingerprints.js.map","import { Base64Url } from '../encoders';\r\nimport { BioSample, BioSampleFormat, BioSampleFormatOwner, BioSampleType, BioSampleEncryption, BioSampleHeader, BioSamplePurpose, BioFactor } from \"../biometrics\";\r\nclass FIRData {\r\n    constructor(SDKVersion, Data) {\r\n        this.SDKVersion = SDKVersion;\r\n        this.Data = Data;\r\n        this.version = 1;\r\n    }\r\n}\r\n/**\r\n * Format of a face image sample.\r\n */\r\nexport var FaceImageType;\r\n(function (FaceImageType) {\r\n    FaceImageType[FaceImageType[\"Jpeg\"] = 1] = \"Jpeg\";\r\n})(FaceImageType || (FaceImageType = {}));\r\n/**\r\n * Face image data.\r\n */\r\nexport class FaceImage {\r\n    constructor(\r\n    /** Base64url-encoded image data. */\r\n    ImageData, \r\n    /** Image format. */\r\n    ImageType = FaceImageType.Jpeg) {\r\n        this.ImageData = ImageData;\r\n        this.ImageType = ImageType;\r\n        /** Version info. */\r\n        this.Version = 1;\r\n    }\r\n    /** Extracts face image from a data URL. Only `data:image/jpeg;base64` is supported for now. */\r\n    static fromDataURL(image) {\r\n        return new FaceImage(image.replace(\"data:image/jpeg;base64,\", \"\"));\r\n    }\r\n    /** Extracts face image from a browser's canvas object.  */\r\n    static fromCanvas(canvas, quality = 1.0) {\r\n        return FaceImage.fromDataURL(canvas.toDataURL(\"image/jpeg\", quality));\r\n    }\r\n    /** Exports the face image data to a {@link BioSample} object. */\r\n    toBioSample(format = new BioSampleFormat(BioSampleFormatOwner.None, 0), purpose = BioSamplePurpose.Any, sdkVersion = 0x30100) {\r\n        return new BioSample(new BioSampleHeader(BioFactor.FacialFeatures, format, BioSampleType.Raw, purpose, -1, BioSampleEncryption.None), Base64Url.fromJSON(this));\r\n    }\r\n}\r\n//# sourceMappingURL=face.js.map","/**\r\n * Type of a security question.\r\n */\r\nexport var QuestionType;\r\n(function (QuestionType) {\r\n    /** A security question from a standard predefined list of questions ({@link Question.number} <= 100). */\r\n    QuestionType[QuestionType[\"Regular\"] = 0] = \"Regular\";\r\n    /** A user-defined security question ({@link Question.number} > 100). */\r\n    QuestionType[QuestionType[\"Custom\"] = 1] = \"Custom\";\r\n})(QuestionType || (QuestionType = {}));\r\n/**\r\n * Security question data.\r\n */\r\nexport class Question {\r\n    /** Constructs a security question. */\r\n    constructor(\r\n    /** An index of a question in a question list. */\r\n    number, \r\n    /** A question language ID. */\r\n    lang_id, \r\n    /** A question sublanguage ID. */\r\n    sublang_id, \r\n    /** A keyboard layout for the answer. */\r\n    keyboard_layout, \r\n    /** A text of the security question (only when {@link Question.type} === {@link QuestionType.Custom}) */\r\n    text) {\r\n        this.number = number;\r\n        this.lang_id = lang_id;\r\n        this.sublang_id = sublang_id;\r\n        this.keyboard_layout = keyboard_layout;\r\n        this.text = text;\r\n        /** Version info. */\r\n        this.version = 1;\r\n        this.type = number <= 100 ? QuestionType.Regular : QuestionType.Custom;\r\n        if (this.type === QuestionType.Custom && !text)\r\n            throw new Error(\"Question text is required for custom questions\");\r\n    }\r\n    /** Creates a security question from a plain JSON object. */\r\n    static fromJson(json) {\r\n        const obj = json;\r\n        return new Question(obj.number, obj.lang_id, obj.sublang_id, obj.keyboard_layout, obj.text);\r\n    }\r\n}\r\n/**\r\n * An answer to a security question.\r\n */\r\nexport class Answer {\r\n    /** Creates an answer to a security question. */\r\n    constructor(question, text) {\r\n        this.text = text;\r\n        this.number = (question instanceof Question) ? question.number : question;\r\n    }\r\n}\r\n//# sourceMappingURL=questions.js.map","// tslint:disable: ban-types\r\n/**\r\n * Set of converters to UTF16.\r\n */\r\nexport class Utf16 {\r\n}\r\n/** Converts a UTF8 string to a UTF16 string. */\r\nUtf16.fromUtf8 = (s) => decodeURIComponent(escape(Utf8.noBom(s)));\r\n/** Decodes a Base64-encoded string to a UTF16 string. */\r\nUtf16.fromBase64 = (s) => Utf16.fromUtf8(Utf8.fromBase64(s));\r\n/** Decodes a Base64url-encoded string to a UTF16 string. */\r\nUtf16.fromBase64Url = (s) => Utf16.fromUtf8(Utf8.fromBase64Url(s));\r\n/** Appends Byte-Order-Mark (BOM) to the UTF16 string. */\r\nUtf16.withBom = (s) => \"\\uFEFF\" + s;\r\n/** Strips a Byte-Order-Mark (BOM) from the UTF16 string. */\r\nUtf16.noBom = (s) => s.replace(/^\\uFEFF/, \"\");\r\n/**\r\n * Set of converters to UTF8.\r\n */\r\nexport class Utf8 {\r\n}\r\n/** Converts a UTF16 string to a UTF16 string. */\r\nUtf8.fromUtf16 = (s) => unescape(encodeURIComponent(Utf16.noBom(s)));\r\n/** Decodes a Base64-encoded string to a UTF8 string. */\r\nUtf8.fromBase64 = (s) => atob(s);\r\n/** Decodes a Base64url-encoded string to a UTF8 string. */\r\nUtf8.fromBase64Url = (s) => Utf8.fromBase64(Base64.fromBase64Url(s));\r\n/** Converts a byte array to a UTF16 string. */\r\nUtf8.fromBytes = (bytes) => String.fromCharCode(...bytes);\r\n/** Appends Byte-Order-Mark (BOM) to the UTF8 string. */\r\nUtf8.withBom = (s) => \"\\xEF\\xBB\\xBF\" + s;\r\n/** Strips a Byte-Order-Mark (BOM) from the UTF8 string. */\r\nUtf8.noBom = (s) => s.replace(/^\\xEF\\xBB\\xBF/, \"\");\r\n/**\r\n * Set of converters to Base64.\r\n */\r\nexport class Base64 {\r\n}\r\n/** Encodes a UTF8 string to a Base64-encoded string. */\r\nBase64.fromUtf8 = (s) => btoa(s);\r\n/** Encodes a UTF16 string to a Base64-encoded string.  */\r\nBase64.fromUtf16 = (s) => Base64.fromUtf8(Utf8.fromUtf16(s));\r\n/** Converts a Base64url-encoded string to a Base64-encoded string. */\r\nBase64.fromBase64Url = (s) => ((s.length % 4 === 2) ? s + \"==\" :\r\n    (s.length % 4 === 3) ? s + \"=\" : s)\r\n    .replace(/-/g, \"+\")\r\n    .replace(/_/g, \"/\");\r\n/** Converts a byte array to a Base64-encoded string. */\r\nBase64.fromBytes = (bytes) => Base64.fromUtf8(Utf8.fromBytes(bytes));\r\n/** Encodes a plain JSON object or a string to a Base64-encoded string. */\r\nBase64.fromJSON = (obj) => Base64.fromUtf16(JSON.stringify(obj));\r\n/**\r\n * Set of converters to Base64Url.\r\n */\r\nexport class Base64Url {\r\n}\r\n/** Converts a Base64-encoded string to a Base64url-encoded string. */\r\nBase64Url.fromBase64 = (s) => s.replace(/\\=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\r\n/** Converts a UTF8 string to a Base64url-encoded string. */\r\nBase64Url.fromUtf8 = (s) => Base64Url.fromBase64(Base64.fromUtf8(s));\r\n/** Converts a UTF16 string to a Base64url-encoded string. */\r\nBase64Url.fromUtf16 = (s) => Base64Url.fromBase64(Base64.fromUtf16(s));\r\n/** Converts a byte array to a Base64url-encoded string. */\r\nBase64Url.fromBytes = (bytes) => Base64Url.fromUtf8(Utf8.fromBytes(bytes));\r\n/** Encodes a plain JSON object or a string to a Base64url-encoded string. */\r\nBase64Url.fromJSON = (obj) => Base64Url.fromUtf16(JSON.stringify(obj));\r\n/**\r\n * Set of converters to Base32.\r\n */\r\nexport class Base32 {\r\n    /** Converts a byte array to a Base32-encoded string. */\r\n    static fromBytes(bytes) {\r\n        const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\r\n        let v1 = 0, v2 = 0, v3 = 0, v4 = 0, v5 = 0, str = '', l = bytes.length, i = 0;\r\n        const count = Math.floor(l / 5) * 5;\r\n        while (i < count) {\r\n            v1 = bytes[i++];\r\n            v2 = bytes[i++];\r\n            v3 = bytes[i++];\r\n            v4 = bytes[i++];\r\n            v5 = bytes[i++];\r\n            str += digits[v1 >>> 3]\r\n                + digits[(v1 << 2 | v2 >>> 6) & 31]\r\n                + digits[(v2 >>> 1) & 31]\r\n                + digits[(v2 << 4 | v3 >>> 4) & 31]\r\n                + digits[(v3 << 1 | v4 >>> 7) & 31]\r\n                + digits[(v4 >>> 2) & 31]\r\n                + digits[(v4 << 3 | v5 >>> 5) & 31]\r\n                + digits[v5 & 31];\r\n        }\r\n        // remain char\r\n        const remain = l - count;\r\n        if (remain === 0)\r\n            return str;\r\n        switch (remain) {\r\n            // @ts-ignore no-switch-case-fall-through\r\n            case 4: v4 = bytes[--l];\r\n            // @ts-ignore no-switch-case-fall-through\r\n            case 3: v3 = bytes[--l];\r\n            // @ts-ignore no-switch-case-fall-through\r\n            case 2: v2 = bytes[--l];\r\n            // @ts-ignore no-switch-case-fall-through\r\n            case 1: v1 = bytes[--l];\r\n        }\r\n        str += digits[v1 >>> 3];\r\n        switch (remain) {\r\n            case 1: return str\r\n                + digits[(v1 << 2) & 31]\r\n                + '======';\r\n            case 2: return str\r\n                + digits[(v1 << 2 | v2 >>> 6) & 31]\r\n                + digits[(v2 >>> 1) & 31]\r\n                + digits[(v2 << 4) & 31]\r\n                + '====';\r\n            case 3: return str\r\n                + digits[(v1 << 2 | v2 >>> 6) & 31]\r\n                + digits[(v2 >>> 1) & 31]\r\n                + digits[(v2 << 4 | v3 >>> 4) & 31]\r\n                + digits[(v3 << 1) & 31]\r\n                + '===';\r\n            case 4: return str\r\n                + digits[(v1 << 2 | v2 >>> 6) & 31]\r\n                + digits[(v2 >>> 1) & 31]\r\n                + digits[(v2 << 4 | v3 >>> 4) & 31]\r\n                + digits[(v3 << 1 | v4 >>> 7) & 31]\r\n                + digits[(v4 >>> 2) & 31]\r\n                + digits[(v4 << 3) & 31]\r\n                + '=';\r\n        }\r\n        return str;\r\n    }\r\n}\r\n// export class Hex\r\n// {\r\n//     public static encode = (s: string): HexString =>\r\n//         s.split(\"\").map(cp => ('000' + cp.charCodeAt(0).toString(16)).slice(-4)).join('')\r\n//     public static decode = (s: HexString): string =>\r\n//         s.replace(/(..)/g, '%$1'))\r\n// }\r\n//# sourceMappingURL=encoders.js.map","import { UserNameType } from './userNameType';\r\nimport { JWT } from '../jwt/jwt';\r\n/**\r\n * Represents a user's identity using a user's name name and a type of the name.\r\n * This class is typially used to pass a user name during authentication.\r\n */\r\nexport class User {\r\n    /** Constructs the object using a username and a user type.\r\n     * @param name - user name. No name transformation/canonicalization is performed.\r\n     * @param type - an optional type of the user. If not provided, he type is deduced automatically.\r\n     * @remarks\r\n     * If no `type` parameter is provided, the username format is analyzes and automatic type is assigned.\r\n     * For example:\r\n     * * \"user\\@comtoso.com\" name will be parsed as a {@link UserNameType.UPN | User Principal Name (UPN)},\r\n     * * \"Domain\\\\UserX\" name will be parsed as a {@link UserNameType.SAM | Security Account Manager (SAM)} name,\r\n     * * \"6de5b5ed-85fc-4298-a18b-dac7d5a18369\" will be parsed as a {@link UserNameType.UID | Unique Identifier (UID)} name,\r\n     * * \"UserX\" name will be parsed as a {@link UserNameType.DP | DigitalPersona name} (used in LDS)\r\n     * You may provide a `type` parameter if you want to enforce a specific name type.\r\n     */\r\n    constructor(name, type) {\r\n        const reGUID = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r\n        this.name = name || \"\";\r\n        this.type = type || ((this.name.length === 0) ? UserNameType.Unknown :\r\n            (this.name === \"*\") ? UserNameType.Unknown :\r\n                (this.name.indexOf('@') !== -1) ? UserNameType.UPN :\r\n                    (this.name.indexOf('\\\\') !== -1) ? UserNameType.SAM :\r\n                        reGUID.test(this.name) ? UserNameType.UID\r\n                            : UserNameType.DP);\r\n    }\r\n    /** @returns `true` when the User object represents an anonymous user. */\r\n    isAnonymous() {\r\n        return !this.name || this.name.length === 0;\r\n    }\r\n    /** @returns `true` whrn the user object represents any user. */\r\n    isEveryone() {\r\n        return this.name === \"*\";\r\n    }\r\n    /** Creates a user object representing an anonymous user. */\r\n    static Anonymous() {\r\n        return new User(\"\", UserNameType.Unknown);\r\n    }\r\n    /** Creates a user object representing every user. */\r\n    static Everyone() {\r\n        return new User(\"*\", UserNameType.Unknown);\r\n    }\r\n    /** Creates a user object using claims in a JSON Web Token.\r\n     * @param token - a JSON Web Token.\r\n     * @param type - an optional username type to override automatic type detection and force a specific name format.\r\n     * @returns a user object constructed from the `token` claims.\r\n     * @remarks\r\n     * The `token` should contain either {@link ClaimSet.sub |`sub`} or {@link ClaimSet.wan | `wan`} claim\r\n     * to detect a user name. If no such claims are found, then {@link User.Anonymous | anonymous} user is returned.\r\n     * The {@link ClaimSet.sub |`sub`} claim has a priority over the {@link ClaimSet.wan | `wan`} claim.\r\n     * If `type` parameter is not defined, the name type is deduced automatically from the name string.\r\n     * You may provide a `type` parameter if you want to enforce a specific name type.\r\n     * See {@link User.constructor} for type deduction details.\r\n     */\r\n    static fromJWT(token, type) {\r\n        const claims = JWT.claims(token);\r\n        const user = claims.sub && (claims.sub instanceof User) ? claims.sub :\r\n            claims.wan ? new User(claims.wan, type) :\r\n                claims.sub ? new User(claims.sub, type || UserNameType.DP) : User.Anonymous();\r\n        return user;\r\n    }\r\n}\r\n//# sourceMappingURL=user.js.map","import { Utf16 } from '../encoders';\r\nimport { User } from '../users/user';\r\n/** Represents a JSON Web Token Header. */\r\nclass JWTHeader {\r\n    /** Constructs a JWT header. */\r\n    constructor(typ, alg, cty) {\r\n        this.typ = typ;\r\n        this.cty = cty;\r\n        this.alg = alg;\r\n    }\r\n}\r\n/** Represents a JSON Web Token and gives access to the token's payload.\r\n * Note that this class does not allow to validate the token signature in the browser,\r\n * it must be done on a server side.\r\n */\r\nexport class JWT {\r\n    /** Extracts a claims set from the JSON Web Token.\r\n     * @param jwt - a JSON Web Token string.\r\n     * @returns a claims set.\r\n     */\r\n    static claims(jwt) {\r\n        const parts = jwt.split('.');\r\n        const header = JSON.parse(Utf16.fromBase64Url(parts[0]));\r\n        if (header.cty === \"JWT\") {\r\n            // we have a nested JWT with encrypted payload (JWE).\r\n            // Encrypted nested JWT may replicate some claims in the header to be publicly accessible.\r\n            return Object.assign(Object.assign({}, header), new JWTHeader());\r\n        }\r\n        else {\r\n            // unencrypted payload, use claims from the payload only\r\n            const payload = JSON.parse(Utf16.fromBase64Url(parts[1]));\r\n            // convert \"subject\" to a User type\r\n            if (typeof (payload.sub) === \"object\") {\r\n                const { name, type } = payload.sub;\r\n                payload.sub = new User(name, type);\r\n            }\r\n            return payload;\r\n        }\r\n    }\r\n    /** Validates the JSON Web Token and returns a collection of detected validation errors.\r\n     * @param jwt - a JSON Web Token.\r\n     * @returns an array of errors found, or `null` if the token is valid.\r\n     * @remarks\r\n     * Only client-side checks are performed, no signature validation.\r\n     * The token's claims must satisfy following expression:\r\n     * `iat <= nbf < now < exp`\r\n     * where `iat` is time when the token was issued, `nbf` is a time when the token becomes valid,\r\n     * `exp` is a token expiration time, `now` is current time.\r\n     * Following errors may be returned:\r\n     *\r\n     *   * 'JWT.Error.IssueTimeLaterThanNotBefore' if `iat > nbf`,\r\n     *   * 'JWT.Error.NotEffectiveYet' when `now < nbf`,\r\n     *   * 'JWT.Error.Expired' when `now >= exp`.\r\n     */\r\n    static errors(jwt) {\r\n        const e = [];\r\n        const claims = JWT.claims(jwt);\r\n        const now = new Date().getTime() / 1000; // seconds since the epoch start\r\n        // iat < nbf < now < exp\r\n        if (claims.iat && claims.nbf && claims.iat > claims.nbf)\r\n            e.push(new Error('JWT.Error.IssueTimeLaterThanNotBefore'));\r\n        if (claims.nbf && claims.nbf > now)\r\n            e.push(new Error('JWT.Error.NotEffectiveYet'));\r\n        if (claims.exp && claims.exp <= now)\r\n            e.push(new Error('JWT.Error.Expired'));\r\n        return e.length > 0 ? e : null;\r\n    }\r\n}\r\n//# sourceMappingURL=jwt.js.map","/**\r\n * A structure wrapping a JSON Web Token to pass it to the DigitalPersona Web Components services.\r\n */\r\nexport class Ticket {\r\n    /** Constructs a ticket object. */\r\n    constructor(jwt) {\r\n        this.jwt = jwt;\r\n    }\r\n    /** Creates a ticket with an emtpy token. Used as a placeholder when no token is needed. */\r\n    static None() {\r\n        return new Ticket(\"\");\r\n    }\r\n}\r\n//# sourceMappingURL=ticket.js.map","import { Base64Url } from '../encoders';\r\n/**\r\n * Credential data.\r\n */\r\nexport class Credential {\r\n    /** Constructs a credential. */\r\n    constructor(id, data, encode = true) {\r\n        this.id = id;\r\n        this.data = !data ? null\r\n            : !encode ? JSON.stringify(data)\r\n                : Base64Url.fromUtf16(typeof (data) !== \"string\" ? JSON.stringify(data) : data);\r\n    }\r\n    /** Constructs an empty credential object. */\r\n    static None() {\r\n        return new Credential(\"\");\r\n    }\r\n    /** Constructs a credential object representing any credential. */\r\n    static Any() {\r\n        return new Credential(\"*\");\r\n    }\r\n}\r\n// true credentials\r\nCredential.Password = \"D1A1F561-E14A-4699-9138-2EB523E132CC\";\r\nCredential.Fingerprints = \"AC184A13-60AB-40E5-A514-E10F777EC2F9\";\r\nCredential.Face = \"85AEAA44-413B-4DC1-AF09-ADE15892730A\";\r\nCredential.SmartCard = \"D66CC98D-4153-4987-8EBE-FB46E848EA98\";\r\nCredential.ContactlessCard = \"F674862D-AC70-48CA-B73E-64A22F3BAC44\";\r\nCredential.ProximityCard = \"1F31360C-81C0-4EE0-9ACD-5A4400F66CC2\";\r\nCredential.PIN = \"8A6FCEC3-3C8A-40C2-8AC0-A039EC01BA05\";\r\nCredential.SecurityQuestions = \"B49E99C6-6C94-42DE-ACD7-FD6B415DF503\";\r\nCredential.Bluetooth = \"E750A180-577B-47F7-ACD9-F89A7E27FA49\";\r\nCredential.OneTimePassword = \"324C38BD-0B51-4E4D-BD75-200DA0C8177F\";\r\nCredential.U2F = \"5D5F73AF-BCE5-4161-9584-42A61AED0E48\";\r\nCredential.IWA = \"AE922666-9667-49BC-97DA-1EB0E1EF73D2\";\r\nCredential.Email = \"7845D71D-AB67-4EA7-913C-F81E75C3A087\";\r\nCredential.Behavior = \"193C41F6-5CF6-4525-84CC-223603DAC9AB\";\r\n// pseudo-credentials\r\nCredential.Cards = \"FCFA704C-144B-42DB-8DF3-13F5CD20C525\"; // all card types\r\n//# sourceMappingURL=credential.js.map"],"names":["Url","[object Object]","base","path","query","this","href","create","Object","keys","map","key","encodeURIComponent","join","encodeURI","getSanitizedQuery","BioFactor","BioSampleFormatOwner","BioSampleType","BioSamplePurpose","BioSampleEncryption","UserNameType","ClaimName","FingerPosition","FaceImageType","QuestionType","BioSampleFormat","FormatOwner","FormatID","BioSampleHeader","Factor","Format","Type","Purpose","Quality","Encryption","BioSample","Header","Data","Version","Utf16","fromUtf8","s","decodeURIComponent","escape","Utf8","noBom","fromBase64","fromBase64Url","withBom","replace","fromUtf16","unescape","atob","Base64","fromBytes","bytes","String","fromCharCode","btoa","length","fromJSON","obj","JSON","stringify","Base64Url","User","name","type","Unknown","indexOf","UPN","SAM","test","UID","DP","token","claims","JWT","sub","wan","Anonymous","JWTHeader","typ","alg","cty","jwt","parts","split","header","parse","assign","payload","e","now","Date","getTime","iat","nbf","push","Error","exp","Ticket","Credential","id","data","encode","Password","Fingerprints","Face","SmartCard","ContactlessCard","ProximityCard","PIN","SecurityQuestions","Bluetooth","OneTimePassword","U2F","IWA","Email","Behavior","Cards","Finger","position","json","FaceImage","ImageData","ImageType","Jpeg","image","canvas","quality","fromDataURL","toDataURL","format","None","purpose","Any","sdkVersion","FacialFeatures","Raw","Question","number","lang_id","sublang_id","keyboard_layout","text","version","Regular","Custom","question","digits","v1","v2","v3","v4","v5","str","l","i","count","Math","floor","remain"],"mappings":"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"}